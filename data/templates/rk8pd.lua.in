
# -- num/rk8pd.lua.in
# -- 
# -- Copyright (C) 2009-2011 Francesco Abbate
# -- 
# -- This program is free software; you can redistribute it and/or modify
# -- it under the terms of the GNU General Public License as published by
# -- the Free Software Foundation; either version 3 of the License, or (at
# -- your option) any later version.
# -- 
# -- This program is distributed in the hope that it will be useful, but
# -- WITHOUT ANY WARRANTY; without even the implied warranty of
# -- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# -- General Public License for more details.
# -- 
# -- You should have received a copy of the GNU General Public License
# -- along with this program; if not, write to the Free Software
# -- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
# --

# -- Adapted from the GSL Library, version 1.14

# -- Runge-Kutta 8(9), Prince-Dormand 
# --
# -- High Order Embedded Runge-Kutta Formulae
# -- P.J. Prince and J.R. Dormand
# -- J. Comp. Appl. Math.,7, pp. 67-75, 1981

# -- Original author:  G. Jungman
# -- Modified for LuaJIT2: Francesco Abbate

local abs, max, min = math.abs, math.max, math.min

# order = 8

$(include 'ode-defs')

# Abar = { '14005451/335480064',
#	   '0',
#	   '0',
#	   '0',
#	   '0',
#          '-59238493/1068277825',
#	   '181606767/758867731',
#	   '561292985/797845732',
#          '-1041891430/1371343529',
#	   '760417239/1151165299',
#	   '118820643/751138087',
#          '-528747749/2220607170',
#	   '1/4' }

# A = {
#    '13451932/455176623',
#    '0',
#    '0',
#    '0',
#    '0',
#    '-808719846/976000145',
#    '1757004468/5645159321',
#    '656045339/265891186',
#    '-3867574721/1518517206',
#    '465885868/322736535',
#    '53011238/667516719',
#    '2/45' }

# ah = {
#    '1/18',
#    '1/12',
#    '1/8',
#    '5/16',
#    '3/8',
#    '59/400',
#    '93/200',
#    '5490023248/9719169821',
#    '13/20',
#    '1201146811/1299019798',
#    '1',
#    '1' }

# B = { 0 }
# B[2] = { '1/18' }
# B[3] = { '1/48', '1/16' }
# B[4] = { '1/32', '0', '3/32' }
# B[5] = { '5/16', '0', '-75/64', '75/64' }
# B[6] = { '3/80', '0', '0', '3/16', '3/20' }
# B[7] = {
#    '29443841/614563906',
#    '0',
#    '0',
#    '77736538/692538347',
#    '-28693883/1125000000',
#    '23124283/1800000000' }

# B[8] = {
#    '16016141/946692911',
#    '0',
#    '0',
#    '61564180/158732637',
#    '22789713/633445777',
#    '545815736/2771057229',
#    '-180193667/1043307555' }

# B[9] = {
#    '39632708/573591083',
#    '0',
#    '0',
#    '-433636366/683701615',
#    '-421739975/2616292301',
#    '100302831/723423059',
#    '790204164/839813087',
#    '800635310/3783071287' }

# B[10] = {
#    '246121993/1340847787',
#    '0',
#    '0',
#    '-37695042795/15268766246',
#    '-309121744/1061227803',
#    '-12992083/490766935',
#    '6005943493/2108947869',
#    '393006217/1396673457',
#    '123872331/1001029789' }

# B[11] = {
#    '-1028468189/846180014',
#    '0',
#    '0',
#    '8478235783/508512852',
#    '1311729495/1432422823',
#    '-10304129995/1701304382',
#    '-48777925059/3047939560',
#    '15336726248/1032824649',
#    '-45442868181/3398467696',
#    '3065993473/597172653' }

# B[12] = {
#    '185892177/718116043',
#    '0',
#    '0',
#    '-3185094517/667107341',
#    '-477755414/1098053517',
#    '-703635378/230739211',
#    '5731566787/1027545527',
#    '5232866602/850066563',
#    '-4093664535/808688257',
#    '3962137247/1805957418',
#    '65686358/487910083' }

# B[13] = {
#    '403863854/491063109',
#    '0',
#    '0',
#    '-5068492393/434740067',
#    '-411421997/543043805',
#    '652783627/914296604',
#    '11173962825/925320556',
#    '-13158990841/6184727034',
#    '3936647629/1978049680',
#    '-160528059/685178525',
#    '248638103/1413531060',
#    '0' }

# y_err_only = (a_dydt == 0)

local function rk8pd_step(s, t1)
   local t, h, f = s.t, s.h, s.f
   local s_y, s_dydt = s.y, s.dydt
   local hadj, inc

   local $(VL'y')
   local $(VL'k1') = $(AL's_dydt.data')

   if t < t1 and t + h > t1 then h = t1 - t end

   while h > 0 do
      $(VL'y') = $(AL's_y.data')
      local rmax = 0

      do
      local $(VL'ytmp')

#     for S = 2, 13 do
#        for i = 0, N-1 do
            ytmp_$(i) = y_$(i) + h * ($(KCONV(B[S], S-1, i)))
#        end
         local $(VLI('k', S)) = f(t + $(ah[S-1]) * h, $(VL'ytmp'))
#     end

      local $(VL'ksum8')
#     for i = 0, N-1 do
         ksum8_$(i) = $(KCONV(Abar, 13, i))
         y_$(i) = y_$(i) + h * ksum8_$(i)
#     end

#     if not y_err_only then
         local $(VL'dydt') = f(t + h, $(VL'y'))
#        for i = 0, N-1 do
            s_dydt.data[$(i)] = dydt_$(i)
#        end
#     end

      do
      local yerr, ksum7

#     for i = 0, N-1 do
         ksum7 = $(KCONV(A, 12, i))
         yerr = h * (ksum7 - ksum8_$(i))
#     if y_err_only then
         d0 = $(eps_rel) * ($(a_y) * abs(y_$(i))) + $(eps_abs)
#     else
         d0 = $(eps_rel) * ($(a_y) * abs(y_$(i)) + $(a_dydt) * abs(h * dydt_$(i))) + $(eps_abs)
#     end
         r = abs(yerr) / abs(d0)
         rmax = max(r, rmax)
#     end
      end
      end

      hadj, inc = hadjust(rmax, h)
      if inc >= 0 then break end

      h = hadj
   end

#  if y_err_only then
      local $(VL'dydt') = f(t + h, $(VL'y'))
#     for i = 0, N-1 do
         s_dydt.data[$(i)] = dydt_$(i)
#     end
#  end

#  for i = 0, N-1 do
      s_y.data[$(i)] = y_$(i)
#  end
   s.t = t + h
   s.h = hadj
end

return {new= ode_new, init= ode_init, evolve= ode_evolve, step= rk8pd_step}
